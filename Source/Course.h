//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : System Obsługi Studiów
//  @ File Name : Course.h
//  @ Date : 10.06.2023
//  @ Author : Tomasz Wnuk, Bartosz Szynkaruk, Mikołaj Hasiec
//
//

#if !defined(_COURSE_H)
#define _COURSE_H

#include <string>
#include <vector>

#include "Student.h"
#include "Lecturer.h"
#include "Material.h"
#include "VideoConference.h"

class Lecturer;
class Student;
class VideoConference;

/**
 * Klasa przedmiotu uniwersyteckiego
 */
class Course {
public:
    /*
     * Konstruktor
     *
     * @param name Nazwa kursu
     * @param lecturer Wykładowca prowadzący kurs
     */
	Course(std::string name, Lecturer * lecturer);

    /*
     * Konstruktor
     *
     * @param name Nazwa kursu
     * @param lecturer Wykładowca prowadzący kurs
     * @param isVideoConferenceCreated Czy wideokonferencja została utworzona
     */
    Course(std::string name, Lecturer * lecturer, std::string isVideoConferenceCreated);

    /*
     * Zwraca nazwę kursu
     *
     * @return Nazwa kursu
     */
    std::string getName();

    /*
     * Ustawia nazwę kursu
     *
     * @param name Nazwa kursu
     */
    void setName(std::string name);

    /*
     * Zwraca wykładowcę prowadzącego kurs
     *
     * @return Wykładowca prowadzący kurs
     */
    Lecturer * getLecturer();

    /*
     * Ustawia wykładowcę prowadzącego kurs
     *
     * @param lecturer Wykładowca prowadzący kurs
     */
    void setLecturer(Lecturer * lecturer);

    /*
     * Dodaje studenta do kursu
     *
     * @param student Student
     */
    void addStudent(Student * student);

    /*
     * Usuwa studenta z kursu
     *
     * @param login Login studenta
     */
    void removeStudent(std::string login);

    /*
     * Zwraca ilość studentów na kursie
     *
     * @return Ilość studentów na kursie
     */
    int getStudentsSize();

    /*
     * Zwraca studenta na podanym indeksie
     *
     * @param studentIndex Indeks studenta
     *
     * @return Student o podanym indeksie
     */
    Student * getStudentAtIndex(int studentIndex);

    /*
     * Dodaje materiał do kursu
     *
     * @param material Materiał
     */
	void addMaterial(Material * material);

    /*
     * Usuwa materiał z kursu
     *
     * @param name Nazwa materiału
     */
    void deleteMaterial(std::string name);

    /*
     * Tworzy wideokonferencję
     *
     * @param name Nazwa wideokonferencji
     */
	void createVideoConference(std::string name);

    /*
     * Kończy wideokonferencję
     */
    void endVideoConference();

    /*
     * Wyświetla nagłówek
     *
     * @param headerName Nazwa nagłówka
     */
    void displayHeader(const std::string& headerName);

    /*
     * Wyświetla stronę kursu
     */
	void viewCoursePage();

    /*
     * Otwiera menu kursu dla studenta
     *
     * @param student Student otwierający menu
     */
    void openStudentCourseMenu(Student * student);

    /*
     * Otwiera menu kursu dla wykładowcy
     *
     * @param lecturer Wykładowca otwierający menu
     */
    void openLecturerCourseMenu(Lecturer * lecturer);

    /*
     * Otwiera menu materiałów
     *
     * @param user Użytkownik otwierający menu
     */
    void openMaterialsMenu(User * user);

private:

    /*
     * Nazwa kursu
     */
	std::string name;

    /*
     * Wykładowca prowadzący kurs
     */
    Lecturer * lecturer;

    /*
     * Studenci na kursie
     */
    std::vector <Student *> students;

    /*
     * Materiały kursu
     */
	std::vector <Material *> materials;

    /*
     * Wideokonferencja
     */
	VideoConference * videoConference;
};

#endif  //_COURSE_H
