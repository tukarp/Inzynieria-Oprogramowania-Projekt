//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : System Obsługi Studiów
//  @ File Name : Course.cpp
//  @ Date : 10.06.2023
//  @ Author : Tomasz Wnuk, Bartosz Szynkaruk, Mikołaj Hasiec
//
// 

#include <iostream>

#include "Course.h"

Course::Course(std::string name, Lecturer * lecturer) {
	this->name = name;
	this->lecturer = lecturer;
}

Course::Course(std::string name, Lecturer * lecturer, std::string isVideoConferenceCreated) {
    this->name = name;
    this->lecturer = lecturer;
    if(isVideoConferenceCreated == "1") createVideoConference(name);
}

std::string Course::getName() {
	return name;
}

void Course::setName(std::string name) {
    this->name = name;
}

Lecturer * Course::getLecturer() {
    return lecturer;
}

void Course::setLecturer(Lecturer * lecturer) {
    this->lecturer = lecturer;
}

void Course::addStudent(Student * student) {
	students.push_back(student);
}

void Course::removeStudent(std::string login) {
	for (int i = 0; i < students.size(); i++) {
		if (students[i]->getLogin() == login) {
			students.erase(students.begin() + i);
		}
	}
}

int Course::getStudentsSize(){
    return students.size();
}

Student * Course::getStudentAtIndex(int studentIndex) {
    return students[studentIndex];
}

void Course::addMaterial(Material *material) {
	materials.push_back(material);
}

void Course::deleteMaterial(std::string name) {
	for (int i = 0; i < materials.size(); i++) {
		if (materials[i]->getName() == name) {
			materials.erase(materials.begin() + i);
		}
	}
}

void Course::createVideoConference(std::string name) {
    this->videoConference = new VideoConference(name, lecturer);
}

void Course::endVideoConference() {
	std::cout << "Zakonczono wideokonferencje!" << "\n";
    for (int i = 0; i < students.size(); i++) {
        videoConference->removeStudent(students[i]->getLogin());
    }
    videoConference = nullptr;
}

void Course::displayHeader(const std::string& headerName) {
    const int totalWidth = 90;
    const int nameWidth = name.length();
    const int paddingWidth = (totalWidth - nameWidth) / 2;

    std::cout << "[========================================================================================]\n";
    std::cout << "|" << std::string(paddingWidth, '~') << headerName << std::string(paddingWidth - 1, '~') << "|\n";
    std::cout << "[========================================================================================]\n";
}

void Course::viewCoursePage() {
    displayHeader(getName());
	std::cout << "| Wykladowca: " << lecturer->getFirstName() << " " << lecturer->getLastName() << "\n";
	std::cout << "| Uczestnicy: \n";
	for (int i = 0; i < students.size(); i++) {
		std::cout << "| " << i + 1 << ". " << students[i]->getFirstName() << " " << students[i]->getLastName() << "\n";
	}
}

void Course::openStudentCourseMenu(Student * student) {
    std::string userInput;

    while (true) {
        displayHeader(getName());
        std::cout << "| 1. Wyswietl strone kursu                                                               |\n";
        std::cout << "| 2. Otworz materialy                                                                    |\n";
        std::cout << "| 3. Dolacz do wideokonferencji                                                          |\n";
        std::cout << "| 4. Wroc                                                                                |\n";
        std::cout << "[========================================================================================]\n";

        std::cin >> userInput;
        switch (std::stoi(userInput)) {
            case 1:
                viewCoursePage();
                break;
            case 2:
                openMaterialsMenu(student);
                break;
            case 3:
                if (videoConference != nullptr) {
                    videoConference->openStudentVideoConferenceMenu(student);
                } else {
                    std::cout << "Wideokonferencja nie jest utworzona!" << "\n";
                }
                break;
            case 4:
                std::cout << "Opusciles menu kursu " << getName() << "!" << "\n";
                return;
            default:
                std::cout << "Niepoprawna opcja!" << "\n";
                break;
        }
    }
}

void Course::openLecturerCourseMenu(Lecturer * lecturer) {
    std::string userInput;

    while (true) {
        displayHeader(getName());
        std::cout << "| 1. Wyswietl strone kursu                                                               |\n";
        std::cout << "| 2. Otworz materialy                                                                    |\n";
        std::cout << "| 3. Dolacz do wideokonferencji                                                          |\n";
        std::cout << "| 4. Wroc                                                                                |\n";
        std::cout << "[========================================================================================]\n";

        std::cin >> userInput;
        switch (std::stoi(userInput)) {
            case 1:
                viewCoursePage();
                break;
            case 2:
                openMaterialsMenu(lecturer);
                break;
            case 3:
                if (videoConference == nullptr) {
                    createVideoConference(getName());
                    videoConference->openLecturerVideoConferenceMenu(lecturer);
                } else {
                    endVideoConference();
                    createVideoConference(getName());
                    videoConference->openLecturerVideoConferenceMenu(lecturer);
                }
                break;
            case 4:
                std::cout << "Opusciles menu kursu " << getName() << "!" << "\n";
                return;
            default:
                std::cout << "Niepoprawna opcja!" << "\n";
                break;
        }
    }
}

void Course::openMaterialsMenu(User * user) {
    std::string userInput;

    while (true) {
        std::cout << "[========================================================================================]\n";
        std::cout << "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Materialy kursu~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n";
        std::cout << "[========================================================================================]\n";
        std::cout << "| 1. Otworz materialy                                                                    |\n";
        std::cout << "| 2. Dodaj materialy                                                                     |\n";
        std::cout << "| 3. Wroc                                                                                |\n";
        std::cout << "[========================================================================================]\n";

        std::string name, description, fileName;
        Material * material;
        int fileSize;
        std::cin >> userInput;
        switch (std::stoi(userInput)) {
            case 1:
                if (materials.empty()) {
                    std::cout << "Brak materialow!" << "\n";
                } else {
                    for (int i = 0; i < materials.size(); i++) {
                        std::cout << i + 1 << ". " << materials[i]->getName() << "\n";
                    }
                    std::cout << "Podaj numer materialu, ktory chcesz otworzyc: ";
                    std::cin >> userInput;
                    materials[std::stoi(userInput) - 1]->materialsMenu();
                }
                break;
            case 2:
                std::cout << "Podaj nazwe materialu: ";
                std::cin >> name;
                std::cout << "Podaj opis materialu: ";
                std::cin >> description;
                std::cout << "Podaj nazwe pliku: ";
                std::cin >> fileName;
                std::cout << "Podaj rozmiar pliku: ";
                std::cin >> fileSize;

                material = new Material(name, description, fileName, fileSize, user);
                addMaterial(material);
                break;
            case 3:
                return;
            default:
                std::cout << "Niepoprawna opcja!" << "\n";
                break;
        }
    }
}
