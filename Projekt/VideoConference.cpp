//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Inżynieria Oprogramowania - Projekt
//  @ File Name : VideoConference.cpp
//  @ Date : 10.06.2023
//  @ Author : Tomasz Wnuk, Bartosz Szynkaruk, Mikołaj Hasiec
//
//

// Deklaracja zależności i bibliotek
#include "VideoConference.h"

// Konstruktor
VideoConference::VideoConference(std::string name, Lecturer * lecturer) {
	this->name = name;
	this->lecturer = lecturer;
}

// Metoda dodająca studenta do konferencji
void VideoConference::addStudent(Student * student) {
    // Dodanie studenta do wektora studentów
	students.push_back(student);
}

// Metoda usuwająca studenta z konferencji
void VideoConference::deleteStudent(std::string login) {
    // Przeszukaje wektor studentów
	for(int i = 0; i < students.size(); i++) {
        // Jeżeli login studenta jest równy podanemu loginowi
		if(students[i]->getLogin() == login) {
            // Usuń studenta z wektora
			students.erase(students.begin() + i);
            // Zakończ pętlę
			break;
		}
	}
}

// Metoda zwracająca nazwę konferencji
void VideoConference::openStudentVideoConferenceMenu(Student * student) {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Pętla menu wideokonferencji studenta
	while(true) {
        // Wyświetl nagłówek menu kursu studenta
        std::cout << "---------------------------------------------------------------------------------------\n";
        std::cout << "----------" << "Wideokonferencja - " << name << "----------\n";
        std::cout << "---------------------------------------------------------------------------------------\n";
        // Wyświetl opcje
		std::cout << "Wybierz opcje:" << "\n";
		std::cout << "1. Wyswietl uczestnikow" << "\n";
		std::cout << "2. Wyjdz" << "\n";

        // Pobierz wybór użytkownika
		std::cin >> userInput;

        // Wykonaj akcję w zależności od wyboru użytkownika
        // Jeżeli wybór to 1
		if(userInput == "1") {
            // Przeszukaj wektor studentów
			for(int i = 0; i < students.size(); i++) {
                // Wyświetl imiona i nazwiska studentów w wideokonferencji
				std::cout << students.at(i)->getFirstName() << " " << students.at(i)->getLastName() << "\n";
			}
        // Jeżeli wybór to 2
		} else if(userInput == "2") {
            // Przeszukaj wektor studentów
			for(int i = 0; i < students.size(); i++) {
                // Jeżeli student jest równy studentowi z wektora
				if(students[i] == student) {
                    // Usuń studenta z wektora
                    deleteStudent(student->getLogin());
                    // Zakończ pętlę
					break;
				}
			}
            // Wyjdź z wideokonferencji
            break;
        // W przeciwnym wypadku
		} else {
            // Wyświetl komunikat o niepoprawnym wyborze
            std::cout << "Niepoprawna opcja!" << "\n";
		}
	}
}

// Metoda zwracająca nazwę konferencji
void VideoConference::openLecturerVideoConferenceMenu(Lecturer * lecturer) {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Pętla menu wideokonferencji wykładowcy
    while(true) {
        // Wyświetl nagłówek menu kursu wykładowcy
        std::cout << "---------------------------------------------------------------------------------------\n";
        std::cout << "----------" << "Wideokonferencja - " << name << "---------------------------------------\n";
        std::cout << "---------------------------------------------------------------------------------------\n";
        // Wyświetl opcje
        std::cout << "Wybierz opcje:" << "\n";
        std::cout << "1. Wyswietl uczestnikow" << "\n";
        std::cout << "2. Zakoncz wideokonferencje" << "\n";

        // Pobierz wybór użytkownika
        std::cin >> userInput;

        // Wykonaj akcję w zależności od wyboru użytkownika
        // Jeżeli wybór to 1
        if(userInput == "1") {
            // Przeszukaj wektor studentów
            for(int i = 0; i < students.size(); i++) {
                // Wyświetl imiona i nazwiska studentów w wideokonferencji
                std::cout << students.at(i)->getFirstName() << "\n";
                std::cout << students.at(i)->getLastName() << "\n";
            }
            // Jeżeli wybór to 2
        } else if(userInput == "2") {
            // Przeszukaj wektor studentów
            for(int i = 0; i < students.size(); i++) {
                // Usuń studenta z wektora studentów po zakończeniu wideokonferencji
                deleteStudent(students[i]->getLogin());
            }
            // W przeciwnym wypadku
        } else {
            // Wyświetl komunikat o niepoprawnym wyborze
            std::cout << "Niepoprawna opcja!" << "\n";
        }
    }
}
