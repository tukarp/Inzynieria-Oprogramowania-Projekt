//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Inżynieria Oprogramowania - Projekt
//  @ File Name : Course.cpp
//  @ Date : 10.06.2023
//  @ Author : Tomasz Wnuk, Bartosz Szynkaruk, Mikołaj Hasiec
//
//

// Deklaracja zależności i bibliotek
#include <iostream>
#include "Course.h"

// Konstruktor klasy Course przyjmujący nazwę kursu i wykładowcę prowadzącego kurs
Course::Course(std::string name, Lecturer * lecturer) {
	this->name = name;
	this->lecturer = lecturer;
}

// Konstruktor klasy Course przyjmujący nazwę kursu, wykładowcę prowadzącego kurs i informację o tym, czy wideokonferencja została utworzona
Course::Course(std::string name, Lecturer * lecturer, std::string isVideoConferenceCreated) {
    this->name = name;
    this->lecturer = lecturer;
    // Jeżeli isVideoConferenceCreated jest podana jako utworzona
    if(isVideoConferenceCreated == "1") {
        // Utwórz wideokonferencję
        createVideoConference(name);
    }
}

// Akcesor pola name
std::string Course::getName() {
	return name;
}

// Mutator pola name
void Course::setName(std::string name) {
    this->name = name;
}

// Metoda dodająca studenta do wektora kursu
void Course::addUser(Student *student) {
    // Dodanie studenta do wektora students
	students.push_back(student);
}

// Metoda usuwająca studenta z wektora kursu
void Course::deleteUser(std::string login) {
    // Przeszukaj wektor students
	for(int i = 0; i < students.size(); i++) {
        // Jeżeli login studenta jest równy loginowi podanemu w argumencie
		if(students[i]->getLogin() == login) {
            // Usuń studenta z wektora
			students.erase(students.begin() + i);
		}
	}
}

// Metoda dodająca materiał do wektora kursu
void Course::addMaterial(Material *material) {
    // Dodaj materiał do wektora materials
	materials.push_back(material);
}

// Metoda usuwająca materiał z wektora kursu
void Course::deleteMaterial(std::string name) {
    // Przeszukaj wektor materials
	for(int i = 0; i < materials.size(); i++) {
        // Jeżeli name materiału jest równa nazwie podanej w argumencie
		if(materials[i]->getName() == name) {
            // Usuń materiał z wektora
			materials.erase(materials.begin() + i);
		}
	}
}

// Metoda tworząca wideokonferencję
void Course::createVideoConference(std::string name) {
    // Utwórz wideokonferencję
    this->videoConference = new VideoConference(name, lecturer);
}

// Metoda kończąca wideokonferencję
void Course::endVideoConference() {
    // Wyświetl komunikat o zakończeniu wideokonferencji
	std::cout << "Zakonczono wideokonferencje!" << "\n";
    // Usuń studentów z wideokonferencji
    for(int i = 0; i < students.size(); i++) {
        videoConference->deleteStudent(students[i]->getLogin());
    }
    // Usuń wskaźnik na wideokonferencję
    videoConference = nullptr;
}

// Metoda wyświetlająca nagłówek
void Course::displayHeader(const std::string& name) {
    const int totalWidth = 90;  // Szerokość całego wyświetlanego napisu
    const int nameWidth = name.length();  // Szerokość nazwy kursu
    const int paddingWidth = (totalWidth - nameWidth) / 2;  // Szerokość wypełnienia
    // Wyświetl nagłówek
    std::cout << "---------------------------------------------------------------------------------------\n";
    std::cout << std::string(paddingWidth, ' ') << name << '\n';
    std::cout << "---------------------------------------------------------------------------------------\n";
}

// Metoda wyświetlająca stronę kursu
void Course::viewCoursePage() {
    // Wyświetl nagłówek strony głównej kursu
    displayHeader(getName());

    // Wyświetl wykładowcę
	std::cout << "Lecturer: " << lecturer->getFirstName() << " " << lecturer->getLastName() << "\n";

    // Wyświetl studentów
	std::cout << "Uczestnicy: \n";
    // Przeszukaj wektor students
	for(int i = 0; i < students.size(); i++) {
        // Wyświetl numer studenta, imię i nazwisko
		std::cout << i + 1 << ". " << students[i]->getFirstName() << " " << students[i]->getLastName() << "\n";
	}
}

// Metoda otwierająca menu kursu dla studenta
void Course::openStudentCourseMenu(Student * student) {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Pętla menu kursu
    while(true) {
        // Wyświetl nagłówek strony głównej kursu
        displayHeader(getName());

        // Wyświetl opcje
        std::cout << "Wybierz opcje:"  << "\n";
        std::cout << "1. Wyswietl strone kursu" << "\n";
        std::cout << "2. Otworz materialy" << "\n";
        std::cout << "3. Dolacz do wideokonferencji" << "\n";
        std::cout << "4. Wroc" << "\n";

        // Pobierz wybór użytkownika
        std::cin >> userInput;

        // Wykonaj akcję w zależności od wyboru użytkownika
        // Jeżeli wybór jest równy 1
        if(userInput == "1") {
            // Wyświetl stronę kursu
            viewCoursePage();
        // Jeżeli wybór jest równy 2
        } else if(userInput == "2") {
            // Otwórz menu materiałów kursu
            openMaterialsMenu(student);
        // Jeżeli wybór jest równy 3
        } else if(userInput == "3") {
            // Jeżeli wideokonferencja istnieje
            if(videoConference != nullptr) {
                // Dodaj studenta do wideokonferencji
                videoConference->addStudent(student);
                // Otwórz menu wideokonferencji
                videoConference->openStudentVideoConferenceMenu(student);
            // W przeciwnym wypadku
            } else {
                // Wyświetl komunikat o braaku wideokonferencji
                std::cout << "Wideokonferencja nie jest utworzona!" << "\n";
            }
        // Jeżeli wybór jest równy 4
        } else if(userInput == "4") {
            // Wyświetl komunikat o opuszczeniu menu kursu
            std::cout << "Opusciles menu kursu " << getName() << "!" << "\n";
            // Wyjdź z pętli
            break;
        // W przeciwnym wypadku
        } else {
            // Wyświetl komunikat o niepoprawnym wyborze
            std::cout << "Niepoprawna opcja!" << "\n";
        }
    }
}

// Metoda otwierająca menu materiałów kursu dla wykładowcy
void Course::openLecturerCourseMenu(Lecturer * lecturer) {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Pętla menu kursu
    while(true) {
        // Wyświetl nagłówek strony głównej kursu
        displayHeader(getName());

        // Wyświetl opcje
        std::cout << "Wybierz opcje:" << "\n";
        std::cout << "1. Wyswietl strone kursu" << "\n";
        std::cout << "2. Otworz materialy" << "\n";
        std::cout << "3. Utworz wideokonferencje" << "\n";
        std::cout << "4. Wroc"  << "\n";

        // Pobierz wybór użytkownika
        std::cin >> userInput;

        // Wykonaj akcję w zależności od wyboru użytkownika
        // Jeżeli wybór jest równy 1
        if(userInput == "1") {
            // Wyświetl stronę kursu
            viewCoursePage();
        // Jeżeli wybór to 2
        } else if(userInput == "2") {
            // Otwórz menu materiałów kursu
            openMaterialsMenu(lecturer);
        // Jeżeli wybór to 3
        } else if(userInput == "3") {
            // Jeżeli wideokonferencja istnieje
            if(videoConference == nullptr) {
                // Utwórz wideokonferencję
                createVideoConference(getName());
                // Otwórz menu wideokonferencji
                videoConference->openLecturerVideoConferenceMenu(lecturer);
            // W przeciwnym wypadku
            } else {
                // Zakończ wideokonferencję
                endVideoConference();
                // Utwórz nową wideokonferencję
                createVideoConference(getName());
                // Otwórz menu wideokonferencji
                videoConference->openLecturerVideoConferenceMenu(lecturer);
            }
            // Jeżeli wybór to 4
        } else if (userInput == "4") {
            // Wyświetl komunikat o opuszczeniu menu kursu
            std::cout << "Opusciles menu kursu " << getName() << "!" << "\n";
            // Wyjdź z pętli
            break;
            // W przeciwnym wypadku
        } else {
            // Wyświetl komunikat o niepoprawnym wyborze
            std::cout << "Niepoprawna opcja!" << "\n";
        }
    }
}

// Metoda otwierająca menu materiałów kursu
void Course::openMaterialsMenu(User * user) {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Pętla menu materiałów kursu
    while(true) {
        // Wyświetl nagłówek menu materiałów kursu
        displayHeader("Materialy kursu " + getName());

        // Dla każdego materiału
        for(int i = 0; i < materials.size(); i++) {
            // Wyświetl numer i nazwę materiału
            std::cout << i + 1 << ". " << materials.at(i)->getName() << "\n";
        }

        // Wyświetl opcje
        std::cout << "Wybierz opcje:" << "\n";
        std::cout << "1. Otworz materialy" << "\n";
        std::cout << "2. Dodaj materialy"  << "\n";
        std::cout << "3. Wroc" << "\n";

        // Pobierz wybór użytkownika
        std::cin >> userInput;

        // Wykonaj akcję w zależności od wyboru użytkownika
        // Jeżeli wybór to równy 1
        if(userInput == "1") {
            // Jeżeli materiały kursu nie są puste
            if(!materials.empty()) {
                // Wyświetl nagłówek menu materiałów kursu
                displayHeader("Materialy kursu " + getName());

                // Przeszuakj wektor materiałów
                for(int i = 0; i < materials.size(); i++) {
                    // Wyświetl numer i nazwę materiału
                    std::cout << i + 1 << ". " << materials.at(i)->getName() << "\n";
                }

                // Wyświetl opcję powrotu
                std::cout << materials.size() + 1 << ". Wroc" << "\n";

                // Pobierz wybór użytkownika
                std::cin >> userInput;

                // Wykonaj akcję w zależności od wyboru użytkownika
                // Jeżeli wybór jest równy 1
                if(std::stoi(userInput) - 1 < materials.size()) {
                    // Otwórz menu materiału
                    materials.at(std::stoi(userInput) - 1)->materialsMenu();
                } else if((std::stoi(userInput) - 1) == materials.size()) {
                    // Wyświetl komunikat o opuszczeniu menu materiałów
                    std::cout << "Opusciles menu materialow!" << "\n";
                    // Wyjdź z pętli
                    break;
                    // W przeciwnym wypadku
                } else {
                    // Wyświetl komunikat o niepoprawnym wyborze
                    std::cout << "Niepoprawna opcja!" << "\n";
                }
            // Jeżeli materiały kursu są puste
            } else {
                // Wyświetl komunikat o braku materiałów
                std::cout << "Brak materialow!" << "\n";
            }
        // Jeżeli wybór to 2
        } else if(userInput == "2") {
            // Menu dodawania materiału
            // Pobierz dane materiału
            // Utwórz zmienne przechowujące dane materiału
            std::string materialName;           // Nazwa
            std::string materialDescription;    // Opis
            std::string materialFileName;       // Nazwa pliku
            std::string materialFileSize;       // Rozmiar pliku
            User * addedBy = user;              // Materiał dodany przez

            // Pobierz dane materiału
            // Pobierz nazwę
            std::cout << "Podaj nazwe: ";
            std::cin >> materialName;

            // Pobierz opis
            std::cout << "Podaj opis: ";
            std::cin >> materialDescription;

            // Pobierz nazwę pliku
            std::cout << "Podaj nazwe pliku: ";
            std::cin >> materialFileName;

            // Pobierz fileSize pliku
            std::cout << "Podaj rozmiar pliku[kB]: ";
            std::cin >> materialFileSize;

            // Jeżeli któryś z parametrów jest pusty
            if(materialName.empty() || materialDescription.empty() || materialFileName.empty() || materialFileSize.empty()) {
                // Wyświetl komunikat o niepoprawnych danych
                std::cout << "Niepoprawne dane!" << "\n";
                // Wyjdź z pętli
                break;
            }

            // Dodaj materiał
            materials.push_back(new Material(materialName,materialDescription,
                                             materialFileName, std::stoi(materialFileSize), addedBy));
        // Jeżeli wybór to 2
        } else if(userInput == "3") {
            // Wyświetl komunikat o opuszczeniu menu kursów
            std::cout << "Opusciles menu materialow!" << "\n";
            // Wyjdź z pętli
            break;
        // W przeciwnym wypadku
        } else {
            // Wyświetl komunikat o niepoprawnym wyborze
            std::cout << "Niepoprawna opcja!" << "\n";
        }
    }
}
