//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Inżynieria Oprogramowania - Projekt
//  @ File Name : Material.cpp
//  @ Date : 10.06.2023
//  @ Author : Tomasz Wnuk, Bartosz Szynkaruk, Mikołaj Hasiec
//
//

// Deklaracja zależności i bibliotek
#include "Material.h"

// Konstruktor klasy Material
Material::Material(std::string name, std::string description, std::string fileName, int fileSize, User *addedBy) {
	this->name = name;
	this->fileSize = fileSize;
	this->addedBy = addedBy;
}

// Akcesor pola name
std::string Material::getName() {
	return name;
}

// Mutator pola name
void Material::setName(std::string name) {
    this->name = name;
}

// Akcesor pola description
std::string Material::getDescription() {
    return description;
}

// Mutator pola description
void Material::setDescription(std::string description) {
    this->description = description;
}

// Akcesor pola fileName
std::string Material::getFileName() {
    return fileName;
}

// Mutator pola fileName
void Material::setFileName(std::string fileName) {
    this->fileName = fileName;
}

// Akcesor pola fileSize
int Material::getFileSize() {
    return fileSize;
}

// Mutator pola fileSize
void Material::setFileSize(int fileSize) {
    this->fileSize = fileSize;
}

// Akcesor pola addedBy
User * Material::getAddedBy() {
    return addedBy;
}

// Mutator pola addedBy
void Material::setAddedBy(User * addedBy) {
    this->addedBy = addedBy;
}

// Metoda wyświetlająca nagłówek
void Material::displayHeader(const std::string& name) {
    const int totalWidth = 90;  // Szerokość całego wyświetlanego napisu
    const int nameWidth = name.length();  // Szerokość nazwy kursu
    const int paddingWidth = (totalWidth - nameWidth) / 2;  // Szerokość wypełnienia
    // Wyświetl nagłówek
    std::cout << "==========================================================================================\n";
    std::cout << std::string(paddingWidth, ' ') << name << "\n";;
    std::cout << "==========================================================================================\n";
}

// Metoda wyswietlajaca dane materialu
void Material::printMaterial() {
    // Wyswietl dane materialu
    displayHeader("Material " + getName());  // Nazwa materiału
    std::cout << "Opis: " << this->description << "\n";  // Opis materiału
    std::cout << "Nazwa pliku: " << this->fileName << "\n";  // Nazwa pliku
    std::cout << "Rozmiar pliku: " << this->fileSize << " MB\n";  // Rozmiar pliku
    std::cout << "Dodany przez: " << this->addedBy->getFirstName() << " " << this->addedBy->getLastName() << "\n";  // Dodany przez
}

// Metoda wyswietlajaca menu materiału
void Material::materialsMenu() {
    // Utwórz zmienną przechowującą wybór użytkownika
    std::string userInput;

    // Petla wyświetlająca menu materiału
	while(true) {
        // Wyswietl nagłówek
        displayHeader("Material " + getName());

		// Wyswietl opcje
		std::cout << "Wybierz opcje:" << "\n";
		std::cout << "1. Wyswietl dane" << "\n";
		std::cout << "2. Pobierz plik" << "\n";
		std::cout << "3. Wroc" << "\n";

        // Pobierz wybór użytkownika
		std::cin >> userInput;

        // Sprawdź wybór użytkownika
        // Jeżeli wybór to 1
		if(userInput == "1") {
            // Wyświetl dane materiału
            printMaterial();
        // Jeżeli wybór to 2
		} else if(userInput == "2") {
            // Pobierz plik
			downloadFile();
        // Jeżeli wybór to 3
		} else if (userInput == "3") {
            // Zakończ pętlę
            break;
        // W przeciwnym wypadku
		} else {
            // Wyswietl komunikat o błędzie
			std::cout << "Niepoprawna opcja!" << "\n";
		}
	}
}

// Metoda symulująca pobieranie pliku
void Material::downloadFile() {
    // Utwórz zmienne przechowujące dane paska postępu
	int barWidth = 70;  // Szerokość paska postępu
	int duration = 100;  // Czas trwania symulacji pobierania pliku
	int total = 10;  // Całkowita ilość iteracji pętli

    // Pętla symulująca pobieranie pliku
    // Iteruj od 0 do total
	for(int i = 0; i < total; ++i) {
        // Wyswietl początek paska postępu
		std::cout << "[";
        // Oblicz postęp
		int progress = (barWidth * i) / total;
        // Iteruj od 0 do barWidth
		for(int j = 0; j < barWidth; ++j) {
            // Jeżeli j jest mniejsze od postępu
			if(j < progress) {
                // Wyswietl "="
				std::cout << "=";
            // Jeżeli j jest równe postępowi
			} else if(j == progress) {
                // Wyswietl ">"
				std::cout << ">";
            // W przeciwnym wypadku
			} else {
                // Wyswietl spacje
				std::cout << " ";
			}
		}
        // Wyswietl koniec paska postępu
		std::cout << "] " << int((float(i) / total) * 100.0) << "%\r";
        // Wymuś wypisanie danych na ekran
		std::cout.flush();
        // Uśpij wątek na czas zmiennej duration w milisekundach
		std::this_thread::sleep_for(std::chrono::milliseconds(duration));
	}
    // Wyswietl koniec paska postępu
    std::cout << "[";
    // Iteruj od 0 do barWidth
    for (int j = 0; j < barWidth; ++j) {
        // Wyswietl zank paska postępu
        std::cout << "=";
    }
    // Wyswietl koniec paska postępu
    std::cout << "] 100%" << std::endl;
    // Wyswietl komunikat o pobraniu pliku
    std::cout << "Pobrano plik!" << std::endl;
}
